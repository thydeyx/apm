#!/usr/bin/env python
# -*- coding: utf-8 -*-
# @Author: anchen
# @Date:   2015-10-30 10:45:03
# @Last Modified by:   anchen
# @Last Modified time: 2016-06-25 20:33:34

from django.shortcuts import render
from django.shortcuts import render_to_response
from django.http import HttpResponse
from django.http import HttpResponseRedirect
from django.template import Context
from django.http import JsonResponse
import json
from major.models import *

def taskinfo(request,taskid):
    taskid = int(taskid)
    task = Tasks.objects.get(id=taskid)
    nodeApp = task.nodes.all()

    context = {}
    try:
        nodes = [item.node for item in nodeApp]
        nodes = list(set(nodes))
    except Exception,e:
        print (e)
    # for item in nodes:
    #     print (item.os)
    context['taskid']=taskid
    context['task'] = task
    context['nodes'] = nodes
    return render_to_response('task/taskinfo.html',context)



def taskUnusual(request,taskid):
    taskid = int(taskid)
    task = Tasks.objects.get(id=taskid)
    nodeApp = task.nodes.all()
    context = {}
    try:
        nodes = [item.node for item in nodeApp]
        nodes = list(set(nodes))
    except Exception,e:
        print (e)
    for item in nodes:
        print (item.os)
    context['taskid']=taskid
    context['task'] = task
    context['nodes'] = nodes
    return render_to_response('report/taskUnusualReport.html',context)



def ioedit(request,taskid):
    taskid = int(taskid)
    task = Tasks.objects.get(id=taskid)
    nodeApp = task.nodes.all()
    context = {}
    try:
        nodes = [item.node for item in nodeApp]
        nodes = list(set(nodes))
    except Exception,e:
        print (e)
    for item in nodes:
        print (item.os)
    context['taskid']=taskid
    context['task'] = task
    context['nodes'] = nodes
    return render_to_response('ioedit.html',context)

def pfmtstReport(request,taskid):
    taskid = int(taskid)
    task = Tasks.objects.get(id=taskid)
    nodeApp = task.nodes.all()
    context = {}
    try:
        nodes = [item.node for item in nodeApp]
        nodes = list(set(nodes))
    except Exception, e:
        print (e)
    for item in nodes:
        print (item.os)
    context['taskid'] = taskid
    context['task'] = task
    context['nodes'] = nodes
    return render_to_response('pfmtstReport.html',context)
